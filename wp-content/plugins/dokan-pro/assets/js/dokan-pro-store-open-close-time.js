/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/store-open-close-time.js":
/*!************************************************!*\
  !*** ./assets/src/js/store-open-close-time.js ***!
  \************************************************/
/***/ (() => {

eval(";\n(function ($) {\n  var timeFormat = dokan_helper.i18n_time_format,\n    fullDayString = dokanMultipleTime.fullDayString,\n    multipleOpenCloseTime = {\n      init: function init() {\n        $('.dokan-store-times').on('click', '.open-close-actions a', this.stopDefaultBehaviour);\n        $('.dokan-store-times').on('focus', '.dokan-form-control', this.changeClockTimeOnFocus);\n        $('.dokan-store-times').each(this.onLoadContainer);\n        $('.dokan-store-times').on('click', '.added-store-opening-time', this.addedStoreMultipleTime);\n        $('.dokan-store-times').on('click', '.remove-store-closing-time', this.removeStoreMultipleTime);\n        $('input[name=\"dokan_update_store_settings\"]').on('click', this.updateStoreSettings);\n        $('input[name=\"dokan_update_delivery_time_settings\"]').on('click', this.updateStoreSettings);\n        $('.dokan-store-times').on('change', '.dokan-form-group', this.changeDokanOpenCloseTime);\n        $('.dokan-time-slots .dokan-form-group .switch').on('toggle', this.toggleSwitcher);\n      },\n      stopDefaultBehaviour: function stopDefaultBehaviour(e) {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      // Change our timepicker index when focused in our clock.\n      changeClockTimeOnFocus: function changeClockTimeOnFocus(e) {\n        e.stopPropagation();\n        var self = $(this),\n          formGroup = self.closest('.dokan-form-group');\n        formGroup.find('.time .clock-picker .dokan-form-control:eq(0)').timepicker({\n          step: 30,\n          lang: dokan_helper.timepicker_locale,\n          minTime: '12:00 am',\n          maxTime: '11:30 pm',\n          timeFormat: timeFormat,\n          noneOption: {\n            label: fullDayString,\n            value: 'fullDay',\n            className: 'fullDayClockOne'\n          },\n          scrollDefault: 'now'\n        }).on('changeTime', function (event) {\n          var selectedTime = event.target.timepickerObj.selectedValue,\n            formattedTime = moment(selectedTime, 'H\\\\h:mm a').format('hh:mm a');\n          if (fullDayString === selectedTime || 'fullDay' === selectedTime) {\n            var multiple = self.closest('.dokan-form-group').find('.and-time'),\n              element = self.closest('.dokan-form-group').find('.time:eq(0)'),\n              element2 = self.closest('.dokan-form-group').find('.time:eq(1)');\n            if ('undefined' !== typeof multiple[0]) {\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time-to').hide();\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time').remove();\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time-to').before(element);\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time-to').after(element2.hide());\n            } else {\n              self.closest('.dokan-form-group').find('.time-to').hide();\n              self.closest('.dokan-form-group').find('.time:eq(1)').hide();\n            }\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .added-store-opening-time').hide();\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0)').nextAll('.dokan-form-group').remove();\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .clockTwo').val('11:59 pm');\n            $(this).next('input').val('12:00 am');\n            $('.ui-timepicker-wrapper').hide();\n            $(this).val(fullDayString);\n          } else {\n            self.closest('.dokan-form-group').find('.time-to').show();\n            self.closest('.dokan-form-group').find('.time:eq(1)').show();\n            self.closest('.dokan-form-group').find('.added-store-opening-time').show();\n            $(this).next('input').val(formattedTime);\n          }\n        });\n        formGroup.find('.time .clock-picker .dokan-form-control:eq(1)').timepicker({\n          step: 30,\n          lang: dokan_helper.timepicker_locale,\n          minTime: '12:00 am',\n          maxTime: '11:30 pm',\n          timeFormat: timeFormat,\n          noneOption: {\n            label: fullDayString,\n            value: 'fullDay',\n            className: 'fullDayClockTwo'\n          },\n          scrollDefault: 'now'\n        }).on('changeTime', function (event) {\n          var selectedTime = event.target.timepickerObj.selectedValue,\n            formattedTime = moment(selectedTime, 'H\\\\h:mm a').format('hh:mm a');\n          if (fullDayString === selectedTime || 'fullDay' === selectedTime) {\n            var multiple = self.closest('.dokan-form-group').find('.and-time'),\n              element = self.closest('.dokan-form-group').find('.time:eq(0)'),\n              element2 = self.closest('.dokan-form-group').find('.time:eq(1)');\n            if ('undefined' !== typeof multiple[0]) {\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time').remove();\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time-to').before(element.hide()).hide();\n              self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .time-to').after(element2);\n            } else {\n              self.closest('.dokan-form-group').find('.time-to').hide();\n              self.closest('.dokan-form-group').find('.time:eq(0)').hide();\n            }\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .added-store-opening-time').hide();\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0)').nextAll('.dokan-form-group').remove();\n            self.closest('.dokan-store-times').find('.dokan-form-group:eq(0) .clockOne').val('12:00 am');\n            $(this).next('input').val('11:59 pm');\n            $('.ui-timepicker-wrapper').hide();\n            $(this).val(fullDayString);\n          } else {\n            self.closest('.dokan-form-group').find('.time-to').show();\n            self.closest('.dokan-form-group').find('.time:eq(0)').show();\n            self.closest('.dokan-form-group').find('.added-store-opening-time').show();\n            $(this).next('input').val(formattedTime);\n          }\n        });\n      },\n      // Set our default behaviour for multiple store time settings.\n      onLoadContainer: function onLoadContainer(e) {\n        var root = $(this),\n          switch_value = root.find('.toogle-checkbox').val();\n        root.find('.dokan-form-group .time .clock-picker .dokan-form-control').timepicker({\n          timeFormat: timeFormat\n        });\n        root.find('.switch').minitoggle({\n          on: 1 == switch_value ? true : false\n        });\n        if ('1' === switch_value) {\n          root.find('.toggle-handle').attr('style', 'transform: translate3d( 22px, 0px, 0px )');\n          root.find('.close-status').hide();\n          root.find('.open-status').show();\n        }\n        root.find('.dokan-form-group').each(function () {\n          var self = $(this),\n            openValue = root.find('.dokan-form-group:eq(0) .clock-picker .clockOne').val(),\n            closeValue = root.find('.dokan-form-group:eq(0) .clock-picker .clockTwo').val(),\n            lastElement = self.find('.clock-picker .clockTwo').val(),\n            nextElement = self.closest('.dokan-form-group').next('.dokan-form-group');\n          if (openValue === '12:00 am' && closeValue === '11:59 pm') {\n            self.find('.time .clock-picker .dokan-form-control:eq(1)').val('');\n            self.find('.time-to').hide();\n            self.find('.time:eq(1)').hide();\n            self.find('.time .clock-picker .dokan-form-control:eq(0)').val(fullDayString);\n          }\n          if ('11:30 pm' === lastElement || '11:59 pm' === lastElement) {\n            self.find('.added-store-opening-time').addClass('hide-element');\n          }\n          if ('undefined' !== typeof nextElement[0]) {\n            self.find('.added-store-opening-time').addClass('hide-element');\n          }\n        });\n      },\n      // Added a new row for set multiple time in store time settings.\n      addedStoreMultipleTime: function addedStoreMultipleTime(e) {\n        var self = $(this),\n          storeForm = self.closest('.dokan-store-times'),\n          openingId = storeForm.find('.dokan-form-group .dokan-form-control').get(0).id,\n          closingId = storeForm.find('.dokan-form-group .dokan-form-control').get(1).id,\n          openingName = storeForm.find('.dokan-form-group .clockOne').get(0).name,\n          closingName = storeForm.find('.dokan-form-group .clockTwo').get(0).name,\n          addNewRow = \"<div class='dokan-form-group'>\\n                                    <label class='day and-time'></label>\\n                                    <label for='opening-time' class='time'>\\n                                        <div class='clock-picker'>\\n                                            <span class='far fa-clock'></span>\\n                                            <input type='text' class='dokan-form-control opening-time' id='\".concat(openingId, \"'\\n                                                placeholder='\").concat(dokanMultipleTime.place_start, \"' autocomplete='off' value=''>\\n                                            <input type='hidden' value='' class='clockOne' name='\").concat(openingName, \"' />\\n                                            <span class='fa fa-exclamation-triangle'></span>\\n                                        </div>\\n                                    </label>\\n                                    <span class='time-to fas fa-minus'></span>\\n                                    <label for='closing-time' class='time'>\\n                                        <div class='clock-picker'>\\n                                            <span class='far fa-clock'></span>\\n                                            <input type='text' class='dokan-form-control closing-time' autocomplete='off'\\n                                                id='\").concat(closingId, \"' placeholder='\").concat(dokanMultipleTime.place_end, \"' value='' />\\n                                            <input type='hidden' value='' class='clockTwo' name='\").concat(closingName, \"' />\\n                                            <span class='fa fa-exclamation-triangle'></span>\\n                                        </div>\\n                                    </label>\\n                                    <label for='open-close-actions' class='open-close-actions' style='display: flex; align-items: center;'>\\n                                        <a href='' class='remove-store-closing-time'>\\n                                            <span class=\\\"fas fa-times\\\" style=\\\"margin-top: 2px;\\\"></span>\\n                                        </a>\\n                                        <a href='' class='added-store-opening-time'>\\n                                            \").concat(dokanMultipleTime.add_action, \"\\n                                        </a>\\n                                    </label>\\n                                </div>\");\n        self.addClass('hide-element');\n        self.closest('.dokan-form-group').after(addNewRow);\n      },\n      // Remove current row for delete settings.\n      removeStoreMultipleTime: function removeStoreMultipleTime(e) {\n        var self = $(this),\n          formGroup = self.closest('.dokan-form-group'),\n          selfSpan = formGroup.find('.and-time'),\n          nextElement = formGroup.next('.dokan-form-group');\n        if ('undefined' !== typeof nextElement[0]) {\n          var nextOpenTimeValue = nextElement.find('.opening-time').val(),\n            prevCloseTimeValue = formGroup.prev('.dokan-form-group').find('.closing-time').val(),\n            formattedOpenValue = moment(nextOpenTimeValue, 'H\\\\h:mm a').format('HH:mm'),\n            formattedCloseValue = moment(prevCloseTimeValue, 'H\\\\h:mm a').format('HH:mm');\n          if (formattedCloseValue < formattedOpenValue) {\n            formGroup.next('.dokan-form-group').find('.clock-picker:eq(0)').css({\n              'border-color': '#bbb'\n            });\n            formGroup.next('.dokan-form-group').find('.clock-picker:eq(0) .fa-clock').css({\n              'color': '#666'\n            });\n            formGroup.next('.dokan-form-group').find('.opening-time').css({\n              'color': '#4e4e4e'\n            });\n          }\n        }\n        if ('undefined' !== typeof selfSpan[0]) {\n          if ('undefined' === typeof nextElement[0]) {\n            formGroup.prev('.dokan-form-group').find('.added-store-opening-time').removeClass('hide-element');\n          }\n          self.closest('.dokan-form-group').remove();\n          return false;\n        }\n        if ('undefined' === typeof selfSpan[0] && 'undefined' === typeof nextElement[0]) {\n          formGroup.find('.time').css({\n            'visibility': 'hidden'\n          });\n          formGroup.find('.time-to').css({\n            'visibility': 'hidden'\n          });\n          formGroup.find('.open-close-actions').css({\n            'visibility': 'hidden'\n          });\n          formGroup.find('.toogle-checkbox').val(0);\n          formGroup.find('.minitoggle').removeClass('active');\n          formGroup.find('.toggle-handle').css({\n            'transform': 'translate3d(0px, 0px, 0px)'\n          });\n          formGroup.find('.close-status').show();\n          formGroup.find('.open-status').hide();\n          return false;\n        }\n        if ('undefined' === typeof selfSpan[0] && 'undefined' !== typeof nextElement[0]) {\n          var nextFirstClockPicker = nextElement.find('.time:eq(0)'),\n            nextSecondClockPicker = nextElement.find('.time:eq(1)'),\n            nextClockPickerActions = nextElement.find('.open-close-actions');\n          formGroup.find('.time').remove();\n          formGroup.find('.dokan-status').after(nextFirstClockPicker);\n          formGroup.find('.open-close-actions').before(nextSecondClockPicker);\n          formGroup.find('.open-close-actions').before(nextClockPickerActions);\n          formGroup.find('.open-close-actions:eq(1)').remove();\n          nextElement.remove();\n          return false;\n        }\n      },\n      // Update timepicker index when change our clock.\n      changeDokanOpenCloseTime: function changeDokanOpenCloseTime(e) {\n        e.stopPropagation();\n        var root = $(this),\n          closeValue = root.find('.clock-picker .clockTwo').val(),\n          nextElement = root.closest('.dokan-form-group').next('.dokan-form-group');\n        $('.ui-timepicker-wrapper').hide();\n        if ('undefined' === typeof nextElement[0]) {\n          root.closest('.dokan-form-group').find('.added-store-opening-time').removeClass('hide-element');\n        }\n        if ('11:30 pm' === closeValue) {\n          root.find('.added-store-opening-time').addClass('hide-element');\n        }\n        $('.dokan-store-times').each(function () {\n          var form_length = $(this).find('.dokan-form-group').length,\n            i = 0;\n          for (i; i < form_length; i++) {\n            var self = $(this),\n              openValue = self.find('.dokan-form-group:eq(' + i + ') .clock-picker .opening-time').val(),\n              _closeValue = self.find('.dokan-form-group:eq(' + i + ') .clock-picker .closing-time').val(),\n              prevElement = self.find('.dokan-form-group:eq(' + i + ')').prev('.dokan-form-group'),\n              prevCloseValue = self.find('.dokan-form-group:eq(' + (i - 1) + ') .closing-time').val(),\n              formattedOpenValue = moment(openValue, 'H\\\\h:mm a').format('HH:mm'),\n              formattedCloseValue = moment(_closeValue, 'H\\\\h:mm a').format('HH:mm'),\n              formattedPrevCloseValue = moment(prevCloseValue, 'H\\\\h:mm a').format('HH:mm');\n            if (openValue) {\n              if (_closeValue && fullDayString !== _closeValue && formattedOpenValue >= formattedCloseValue) {\n                self.find('.dokan-form-group:eq(' + i + ') .clock-picker').css({\n                  'border-color': '#F87171'\n                });\n                self.find('.dokan-form-group:eq(' + i + ') .fa-clock').css({\n                  'color': '#F87171'\n                });\n                self.find('.dokan-form-group:eq(' + i + ') .dokan-form-control').css({\n                  'color': '#F87171'\n                });\n              } else {\n                self.find('.dokan-form-group:eq(' + i + ') .dokan-form-control').css({\n                  'color': '#4e4e4e'\n                });\n                self.find('.dokan-form-group:eq(' + i + ') .clock-picker').css({\n                  'border-color': '#bbb'\n                });\n                self.find('.dokan-form-group:eq(' + i + ') .fa-clock').css({\n                  'color': '#666'\n                });\n              }\n            }\n            if (!openValue || !_closeValue) {\n              self.find('.dokan-form-group:eq(' + i + ') .clock-picker').css({\n                'border-color': '#F5C33B'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .dokan-form-control').css({\n                'color': '#4e4e4e'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .fa-exclamation-triangle').css({\n                'display': 'block'\n              });\n            } else {\n              self.find('.dokan-form-group:eq(' + i + ') .fa-exclamation-triangle').css({\n                'display': 'none'\n              });\n            }\n            if (openValue && prevCloseValue && 'undefined' !== typeof prevElement[0] && formattedOpenValue < formattedPrevCloseValue) {\n              self.find('.dokan-form-group:eq(' + i + ') .clock-picker:eq(0)').css({\n                'border-color': '#F87171'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .clock-picker:eq(0) .fa-clock').css({\n                'color': '#F87171'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .clock-picker:eq(0) .dokan-form-control').css({\n                'color': '#F87171'\n              });\n            }\n            if (fullDayString === openValue || fullDayString === _closeValue) {\n              self.find('.dokan-form-group:eq(' + i + ') .dokan-form-control').css({\n                'color': '#4e4e4e'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .clock-picker').css({\n                'border-color': '#bbb'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .fa-clock').css({\n                'color': '#666'\n              });\n              self.find('.dokan-form-group:eq(' + i + ') .fa-exclamation-triangle').css({\n                'display': 'none'\n              });\n            }\n          }\n        });\n      },\n      updateStoreSettings: function updateStoreSettings(event) {\n        $('.dokan-store-times').each(function () {\n          var i = 0,\n            form_length = $(this).find('.dokan-form-group').length;\n          for (i; i < form_length; i++) {\n            var self = $(this),\n              openValue = self.find('.dokan-form-group:eq(' + i + ') .clock-picker .opening-time').val(),\n              closeValue = self.find('.dokan-form-group:eq(' + i + ') .clock-picker .closing-time').val(),\n              prevElement = self.find('.dokan-form-group:eq(' + i + ')').prev('.dokan-form-group'),\n              workingStatus = self.find('.toogle-checkbox').val(),\n              prevCloseValue = self.find('.dokan-form-group:eq(' + (i - 1) + ') .closing-time').val(),\n              formattedOpenValue = moment(openValue, 'H\\\\h:mm a').format('HH:mm'),\n              formattedCloseValue = moment(closeValue, 'H\\\\h:mm a').format('HH:mm'),\n              formattedPrevCloseValue = moment(prevCloseValue, 'H\\\\h:mm a').format('HH:mm');\n            if ('0' === workingStatus || fullDayString === openValue || fullDayString === closeValue) {\n              continue;\n            }\n            if (!openValue) {\n              multipleOpenCloseTime.updateSettingsView(self, i, 150, 0);\n              event.preventDefault();\n              return false;\n            }\n            if (!closeValue) {\n              multipleOpenCloseTime.updateSettingsView(self, i, 150, 1);\n              event.preventDefault();\n              return false;\n            }\n            if (formattedOpenValue >= formattedCloseValue) {\n              multipleOpenCloseTime.updateSettingsView(self, i, 300);\n              event.preventDefault();\n              return false;\n            }\n            if (prevCloseValue && 'undefined' !== typeof prevElement[0] && formattedOpenValue < formattedPrevCloseValue) {\n              multipleOpenCloseTime.updateSettingsView(self, i, 300, 0);\n              event.preventDefault();\n              return false;\n            }\n          }\n          return true;\n        });\n      },\n      updateSettingsView: function updateSettingsView(element, domIndex, animateSpeed) {\n        var eq = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        return function (eq) {\n          var eq = false !== eq ? \":eq(\".concat(eq, \")\") : '';\n          element.find('.dokan-form-group:eq(' + domIndex + ') .clock-picker' + eq).css({\n            'border-color': '#F87171'\n          });\n          element.find('.dokan-form-group:eq(' + domIndex + ') .clock-picker' + eq + ' .fa-clock').css({\n            'color': '#F87171'\n          });\n          element.find('.dokan-form-group:eq(' + domIndex + ') .dokan-form-control' + eq).css({\n            'color': '#F87171'\n          });\n          $('html, body').animate({\n            scrollTop: $('.dokan-time-slots').offset().top - 120\n          }, animateSpeed);\n        }(eq);\n      },\n      toggleSwitcher: function toggleSwitcher(e) {\n        var self = $(this),\n          close_form_group = self.closest('.dokan-form-group');\n        if (e.isActive) {\n          close_form_group.find('.toogle-checkbox').val(1);\n          close_form_group.find('.time').css({\n            'visibility': 'visible'\n          });\n          close_form_group.find('.time-to').css({\n            'visibility': 'visible'\n          });\n          close_form_group.find('.open-close-actions').css({\n            'visibility': 'visible'\n          });\n          close_form_group.nextAll('.dokan-form-group').show();\n          close_form_group.find('.close-status').hide();\n          close_form_group.find('.open-status').show();\n        } else {\n          close_form_group.find('.toogle-checkbox').val(0);\n          close_form_group.find('.time').css({\n            'visibility': 'hidden'\n          });\n          close_form_group.find('.time-to').css({\n            'visibility': 'hidden'\n          });\n          close_form_group.find('.open-close-actions').css({\n            'visibility': 'hidden'\n          });\n          close_form_group.nextAll('.dokan-form-group').hide();\n          close_form_group.find('.close-status').show();\n          close_form_group.find('.open-status').hide();\n        }\n      }\n    };\n\n  // Initialize our object here.\n  $(document).ready(function () {\n    multipleOpenCloseTime.init();\n  });\n})(jQuery);\n\n//# sourceURL=webpack://dokan-pro/./assets/src/js/store-open-close-time.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/js/store-open-close-time.js"]();
/******/ 	
/******/ })()
;